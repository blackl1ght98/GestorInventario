@using GestorInventario.PaginacionLogica
@model List<Producto>
<!-- Tabla para mostrar los proveedores existentes -->
<h1>Productos</h1>
<p>
    <a asp-action="Create" class="btn btn-info">Crear Producto</a>

</p>
@{
    //Hace referencia al ViewData creado en el controlador como ViewData["Paginas"] se ha llamado
    //Paginas el ViewData el ViewBag.Paginas espera algo que se llame paginas porque es a por lo que
    //va a ir cuando se ejecute y decimos que este ViewBag.Paginas es una lista de PaginasModel
    var paginas = ViewBag.Paginas as List<PaginasModel>;
}
@* Este código renderiza una vista parcial en ASP.NET.

La función Html.RenderPartial se utiliza para renderizar una vista parcial.
El primer argumento, "_CreatePartial", es el nombre de la vista parcial que se va a renderizar.
El segundo argumento, new ProveedorViewModel(), es el modelo que se pasa a la vista parcial.

Cuando este código se ejecuta, ASP.NET renderiza la vista parcial "_CreatePartial" y le pasa un nuevo objeto
ProveedorViewModel como modelo.
Esto significa que cualquier lugar en tu vista donde veas este código, ASP.NET renderizará la vista parcial
"_CreatePartial" en su lugar.

Las vistas parciales son útiles para reutilizar bloques de código que se repiten en varias vistas.
En lugar de duplicar ese código en cada vista, puedes ponerlo en una vista parcial y luego referenciar esa
vista parcial en las vistas que necesitan ese bloque de código.
 *@
@* @{
    Html.RenderPartial("_CreatePartial", new ProveedorViewModel());
} *@
<form asp-controller="Productos" asp-action="Index">
    <p>
        Buscar: <input type="text" name="buscar" class="form-text" />
        <input type="submit" value="Buscar" class="btn btn-sm btn-dark" />
    </p>
</form>
<form asp-controller="Productos" asp-action="Index">
    <p>
        Buscar: <input type="text" name="buscar" class="form-text" />
        <br/>
        Ordenar por precio:
        <select name="ordenarPorprecio" class="form-select mt-2">
            <option value="">Seleccionar...</option>
            <option value="asc">Menor a mayor</option>
            <option value="desc">Mayor a menor</option>
        </select>
        <input type="submit" value="Buscar" class="btn btn-sm btn-dark" />
    </p>
</form>

<table class="table table-striped table-bordered w-100">
    <thead>
        <tr>
            <th class="col-2">NombreProducto</th>
            <th class="col-2">Imagen</th>
            <th class="col-2">Descripcion</th>
            <th class="col-2">Cantidad</th>
            <th class="col-2">Precio</th>
            <th class="col-2">Nombre Proveedor</th>
            <th class="col-2" colspan="3">Acciones</th>
            <!-- Agrega aquí las demás columnas de la tabla -->
        </tr>
    </thead>
    <tbody>
        @foreach (var producto in Model)
        {
            <tr>
                <td>@producto.NombreProducto</td>
                <td>
                    <img src="@producto.Imagen" alt="Imagen del producto" style="width:100px;height:100px;" />
                </td>
                <td>@producto.Descripcion</td>
                <td>
                    <div class="d-flex justify-content-between align-items-center">
                        @if (User.IsInRole("administrador"))
                        {
                            <form asp-action="Decrementar" method="post">
                                <input type="hidden" name="id" value="@producto.Id" />
                                <button type="submit" class="btn btn-primary"><i class="bi bi-arrow-down"></i></button>
                            </form>
                        }
                        <span>@producto.Cantidad</span>
                        @if (User.IsInRole("administrador"))
                        {
                            <form asp-action="Incrementar" method="post">
                                <input type="hidden" name="id" value="@producto.Id" />
                                <button type="submit" class="btn btn-primary"><i class="bi bi-arrow-up-short"></i></button>
                            </form>
                        }
                    </div>
                </td>

              
                <td>@producto.Precio</td>
                <td>@producto.IdProveedorNavigation?.NombreProveedor  </td>
                
                <td>
                    <form asp-action="AgregarAlCarrito" method="post">
                        <input type="hidden" name="idProducto" value="@producto.Id" />
                        <input type="number" name="cantidad" min="1" max="@producto.Cantidad" value="1" />
                        <button type="submit" class="btn btn-primary mt-2">Agregar al carrito</button>
                        @if (TempData["ErrorMessage"] != null)
                    {
                    <div class="alert alert-success">
                                @TempData["ErrorMessage"]
                    </div>
                    }
                    </form>

                </td>
              
                <td>
                    @if (User.IsInRole("administrador"))
                    {
                        <a asp-action="Delete" asp-route-id="@producto.Id" class="btn btn-danger">Delete</a>
                    }
                </td>
                <td>
                    @if (User.IsInRole("administrador"))
                    {
                    <a asp-action="Edit" asp-route-id="@producto.Id" class="btn btn-warning">Update</a>
                    }
                </td>
                <!-- Agrega aquí las demás celdas de la fila -->
            </tr>

        }
    </tbody>
</table>
<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        <!--Como paginas es una lista se puede iterar pues se itera obteniendo todas las paginas-->
        @foreach (var pagina in paginas)
        {
            <!--
                Creamos un elemento de lista (<li>) para cada página
                Si la página está habilitada, no añadimos ninguna clase adicional
                Si la página no está habilitada, añadimos la clase "disabled"
                Si la página está activa, añadimos la clase "active"

            -->
            <li class="page-item @(pagina.Habilitada ? null :"disabled") @(pagina.Activa ? "active":null)">
                <!--

                    Creamos un enlace (<a>) para cada página
                     El enlace lleva a la acción "Index" del controlador actual con el número de la página como parámetro
                     El texto del enlace es el texto de la página
                -->
                <a class="page-link" href="@Url.Action("Index", new { Pagina = pagina.Pagina })">@pagina.Texto</a>
            </li>
        }
    </ul>
</nav>
