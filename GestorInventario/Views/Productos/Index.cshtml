@model ProductsViewModel
@using GestorInventario.PaginacionLogica
@using GestorInventario.ViewModels.product
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Catálogo de Productos - GestorInventario";
    ViewData["MetaDescription"] = "Explora nuestro catálogo completo de productos. Gestiona inventario, realiza pedidos y administra productos con nuestro sistema integral.";
}

<style>
    /* CSS optimizado para prevenir CLS - Mantenemos lo esencial, reducimos transiciones innecesarias para mejor rendimiento */
    .card {
        min-height: 40px; 
    }

    .product-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        background-color: #f8f9fa; 
    }

   

    .alert.alert-primary {
        min-height: 60px;
    }

    .btn {
        min-height: 38px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .input-group {
        min-height: 38px;
    }

    .pagination {
        min-height: 50px;
    }
</style>

<h1 class="display-5 mb-4 text-primary">Productos</h1>

@if (User.IsInRole("Administrador"))
{
    <a asp-action="Create" class="btn btn-primary mb-4" data-bs-toggle="tooltip" title="Crear nuevo producto">
        <i class="bi bi-plus-circle me-2"></i>Crear Producto
    </a>
}

<div class="alert alert-primary rounded-3 mb-4" role="alert" style="min-height: 60px; display: flex; align-items: center;">
    <i class="bi bi-info-circle me-2"></i>El precio final se calcula en el carrito tras pulsar <strong> Checkout </strong> en PayPal.
</div>

<div class="container my-4">
    <div class="row">
        <div class="col-md-12">
            <h2 class="h4 mb-3 text-primary">Filtros de Búsqueda</h2>
            <form asp-controller="Productos" asp-action="Index" method="get" class="card p-3 shadow-sm mb-3">
                <div class="row g-3">
                    <div class="col-md-4">
                        <input type="text" name="buscar" class="form-control" placeholder="Nombre del producto" value="@ViewData["Buscar"]" />
                    </div>
                    <div class="col-md-3">
                        <select name="ordenarPorPrecio" class="form-select">
                            <option value="">Ordenar por precio</option>
                            <option value="asc" selected="@(ViewData["OrdenarPorprecio"]?.ToString() == "asc")">Menor a mayor</option>
                            <option value="desc" selected="@(ViewData["OrdenarPorprecio"]?.ToString() == "desc")">Mayor a menor</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select name="idProveedor" class="form-select">
                            <option value="">Todos los proveedores</option>
                            @foreach (var proveedor in ViewBag.Proveedores as SelectList)
                            {
                                <option value="@proveedor.Value" selected="@(ViewData["idProveedor"]?.ToString() == proveedor.Value)">@proveedor.Text</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary w-100" data-bs-toggle="tooltip" title="Buscar productos">
                            <i class="bi bi-search me-2"></i>Buscar
                        </button>
                    </div>
                </div>
            </form>
            <form asp-controller="Productos" asp-action="Index" method="get">
                <button type="submit" class="btn btn-outline-secondary w-100" data-bs-toggle="tooltip" title="Restablecer filtros">Limpiar Filtros</button>
            </form>
        </div>
    </div>
</div>

<div class="row">
    @{
        int index = 0;
    }
    @foreach (var producto in Model.Productos)
    {
        index++;
        bool isLcpCandidate = index <= 3;

        <div class="col-md-4 mb-4">
            <div class="card h-100 border-0 shadow-sm hover-card" style="min-height: 350px; aspect-ratio: 388 / 350;">
                <img src="@producto.Imagen?width=388"
                     srcset="@producto.Imagen?width=194 194w,
                                 @producto.Imagen?width=388 388w,
                                 @producto.Imagen?width=776 776w"
                     sizes="(max-width: 576px) 194px,
                                (max-width: 992px) 388px,
                                388px"
                     class="card-img-top product-image"
                     alt="@producto.NombreProducto"
                     style="aspect-ratio: 388 / 218;"
                     width="388"
                     height="218"
                     loading="@(isLcpCandidate ? "eager" : "lazy")"
                     fetchpriority="@(isLcpCandidate ? "high" : "auto")" />
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title text-primary">@producto.NombreProducto</h5>
                    <p class="card-text flex-grow-1">@producto.Descripcion</p>
                    <p class="card-text"><strong>Precio:</strong> @producto.Precio.ToString("C")</p>
                    <p class="card-text"><small class="text-muted">Stock: @producto.Cantidad</small></p>
                    <p class="card-text"><small class="text-muted">Proveedor: @producto.IdProveedorNavigation?.NombreProveedor</small></p>
                    <div class="mt-auto">
                        @if (User.IsInRole("Administrador"))
                        {
                            <div class="d-grid gap-2 mb-2">
                                <a href="@Url.Action("Edit", new { id = producto.Id })" class="btn btn-outline-primary" data-bs-toggle="tooltip" title="Editar producto">Editar</a>
                            </div>
                        }
                        <form asp-action="AgregarAlCarrito" method="post">
                            <input type="hidden" name="idProducto" value="@producto.Id" />
                            <div class="input-group mb-2">
                                <input type="number" name="cantidad" class="form-control" min="1" max="@producto.Cantidad" value="1" style="min-height: 38px;" />
                                <button type="submit" class="btn btn-success" data-bs-toggle="tooltip" title="Agregar al carrito">
                                    <i class="bi bi-cart-plus me-2"></i>Agregar
                                </button>
                            </div>
                            @if (TempData["ErrorMessage"] != null)
                            {
                                <div class="alert alert-success rounded-3" style="min-height: 60px;">
                                    @TempData["ErrorMessage"]
                                </div>
                            }
                        </form>
                        @if (User.IsInRole("Administrador"))
                        {
                            <div class="d-grid">
                                <a href="@Url.Action("Delete", new { id = producto.Id })" class="btn btn-outline-danger" data-bs-toggle="tooltip" title="Eliminar producto">Eliminar</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Paginación (sin cambios, ya es eficiente) -->
@if (Model.Paginas != null && Model.Paginas.Any())
{
    <nav aria-label="Page navigation" class="mt-5">
        <ul class="pagination justify-content-center">
            @foreach (var pagina in Model.Paginas)
            {
                <li class="page-item @(pagina.Habilitada ? "" : "disabled") @(pagina.Activa ? "active" : "")">
                    <a class="page-link page-link-custom @(pagina.Activa ? "active" : "")"
                       href="@Url.Action("Index", new { pagina = pagina.Pagina, buscar = Model.Buscar, ordenarPorPrecio = Model.OrdenarPorPrecio, idProveedor = Model.IdProveedor })">
                        @if (pagina.Texto == "Anterior")
                        {
                            <span aria-hidden="true">«</span>
                        }
                        else if (pagina.Texto == "Siguiente")
                        {
                            <span aria-hidden="true">»</span>
                        }
                        else
                        {
                            @pagina.Texto
                        }
                    </a>
                </li>
            }
        </ul>
    </nav>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Eliminamos manejo de .loaded en container e imágenes para simplificar y acelerar (ya que usamos eager para LCP)

            // Asegurar altura mínima en botones con íconos (mantenido)
            setTimeout(function() {
                document.querySelectorAll('.btn i').forEach(icon => {
                    var btn = icon.closest('.btn');
                    if (btn && !btn.style.minHeight) {
                        btn.style.minHeight = '38px';
                    }
                });
            }, 100);
        });

        // Manejar fuentes web para evitar FOIT (mantenido, es bueno)
        if (document.fonts && document.fonts.ready) {
            document.fonts.ready.then(function() {
                document.documentElement.classList.add('fonts-loaded');
            });
        }

        // Observador de LCP para debugging (agregado como sugeriste, úsalo en dev para verificar)
        new PerformanceObserver((list) => {
            const latestEntry = list.getEntries().at(-1);
            if (latestEntry?.element?.getAttribute('loading') === 'lazy') {
                console.warn('Warning: LCP element was lazy loaded', latestEntry);
            }
        }).observe({ type: 'largest-contentful-paint', buffered: true });
    </script>
}