@using GestorInventario.Domain.Models.ViewModels;

@using GestorInventario.Domain.Models.ViewModels.product
@model ProductosViewModel
<h1>Crear Productos</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
               
                <label asp-for="NombreProducto" class="control-label"></label>
                <input asp-for="NombreProducto" class="form-control" />
            </div>
            <div class="form-group">

                <label asp-for="Descripcion" class="control-label"></label>
                <input asp-for="Descripcion" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="Imagen1" class="control-label"></label>
                <input asp-for="Imagen1" type="file" class="form-control" />
            </div>

            <div class="form-group">

                <label asp-for="Cantidad" class="control-label"></label>
                <input asp-for="Cantidad" class="form-control" />
            </div>
            <div class="form-group">

                <label asp-for="Precio" class="control-label"></label>
                <input asp-for="Precio" class="form-control" />
            </div>
            <div class="form-group">

                <label asp-for="IdProveedor" class="control-label"></label>
              
                <select asp-for="IdProveedor" class="form-select" asp-items="ViewBag.Productos"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Crear" class="btn btn-primary" />

            </div>
        </form>
    </div>

</div>
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-warning">
        @TempData["ErrorMessage"]
    </div>
}
<!--Para que funcionen las validaciones que hemos puesto tenemos que poner un section, un section es para poner algo
    en un lugar de tu pantalla principal la pantalla principal es el _Layaout.cshtml que comparten las vistas
    ¿porque se tiene que llamar Scripts? la razon es sencilla porque en el layaout principal se llama asi aqui se puede poner
    codigo js o otro tipo de codigo
-->
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}