@using GestorInventario.Domain.Models.ViewModels;
@model PedidosViewModel
<h1>Crear Pedidos</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label>Numero Pedido (Provisional): </label>
                <input asp-for="NumeroPedido" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="FechaPedido" class="control-label"></label>
                <input asp-for="FechaPedido" class="form-control" type="date" />
            </div>
           @*  <div class="form-group">
                <label asp-for="EstadoPedido" class="control-label"></label>
                <input asp-for="EstadoPedido" class="form-control" />
            </div> *@
          <div class="form-group">
                <label asp-for="EstadoPedido" class="control-label"></label>

              <select asp-for="EstadoPedido" class="form-select">
                    <option value="En Proceso">En Proceso</option>
                    <option value="Confirmado">Confirmado</option>
                    <option value="Preparado">Preparado</option>
                    <option value="Enviado">Enviado</option>
                    <option value="Entregado">Entregado</option>
              </select>
          </div>
            <div class="form-group">
                <label asp-for="IdsProducto" class="control-label"></label>
                <br/>
                <!--Se crea un bucle for para manejar los productos que se asignen al pedido que va a crear
                    el usuario.
                    El bucle for se ejecuta tantas veces como productos existan en base de datos. 
                    Esto quiere decir que se crearan checkboxs como productos existan en base de datos.
                    Esto i < ViewBag.Productos.Count; obtiene todos los productos que hay en base de datos.
                    La funcion de la i en este bucle for es para conocer la posicion de los productos, esta posicion enpieza en 0 
                    porque i al iniciar el bucle vale 0. De esta manera que si el usuario por ejemplo selecciona 2 productos de 4 que hay 
                    en base de datos primero el bucle obtiene los 4 productos y de esos 4  se almacenan en una lista temporal los productos
                    que se hallan seleccionado, si hemos seleccionado 2 productos,lo que se almacena es el id del producto. 
                    ¿Y entonces porque se acompaña de la i?
                    Se acompaña para saber en que posicion esta de la lista pero no se almacena la id junto a la posicion solo la id del producto seleccionado
                    la i averigua que posicion tiene ese producto en la lista asi que si tenemos dos productos con id [5],[7] que serian nuestros productos
                    seleccionados, este bucle le pone como un "rastreador" para saber donde esta seria como algo asi  0 [5], 1 [7] siendo 0 y 1 la posicion
                    que estan esos productos. Pero importante el funcionamiento real es este: ProductosSeleccionados[0] en el primer recorrido tomaria el primer
                    producto seleccionado y en el segundo recorrido ProductosSeleccionados[1] tomaria el siguiente seleccionado y asi con todos.
                     pues ProductosSeleccionados[i] almacena la id de esos productos
                    y como ya esta almacenada la id se pueden operar con ellos.
                    Esta linea Cantidades[i] almacena la cantidad de cada producto especificada por el usuario 
                    Esta linea IdsProducto es digamos la mas importante porque almacena todos los productos seleccionados o no seleccionados sin esto el bucle
                    no funcionaria.
                -->
                @for (var i = 0; i < ViewBag.Productos.Count; i++)
                {
                    <input type="checkbox" asp-for="ProductosSeleccionados[i]" class="mt-2" /> @ViewBag.Productos[i].NombreProducto
                    <input type="hidden" asp-for="IdsProducto[i]" value="@ViewBag.Productos[i].Id" />

                    <input type="number" asp-for="Cantidades[i]" class="mt-2"  />
                    <br/>
                                   
                    }
            </div>
            <div class="form-group">
                <label asp-for="IdUsuario" class="control-label"></label>
                <select asp-for="IdUsuario" class="form-select" asp-items="ViewBag.Clientes"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Crear" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            // Cuando se cambia el estado de una casilla de verificación...
            $('input[type="checkbox"]').change(function () {
                // Encuentra el campo de cantidad correspondiente.
                var cantidad = $(this).nextAll('input[type="number"]:first');

                // Si la casilla de verificación está marcada, deja la cantidad tal como está.
                // Si no está marcada, establece la cantidad a 0.
                if (!$(this).prop('checked')) {
                    cantidad.val(0);
                }
            });

            // Cuando se envía el formulario...
            $('form').submit(function (event) {
                // Evita que el formulario se envíe inmediatamente.
                event.preventDefault();

                // Para cada casilla de verificación...
                $('input[type="checkbox"]').each(function () {
                    // Si la casilla de verificación no está marcada...
                    if (!$(this).prop('checked')) {
                        // Encuentra el campo de cantidad correspondiente y establece su valor a 0.
                        var cantidad = $(this).nextAll('input[type="number"]:first');
                        cantidad.val(0);
                    }
                });

                // Envía el formulario manualmente.
                this.submit();
            });
        });
    </script>
}
