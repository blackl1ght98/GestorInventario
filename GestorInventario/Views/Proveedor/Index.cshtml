@using GestorInventario.PaginacionLogica

@model List<Proveedore>
<!-- Tabla para mostrar los proveedores existentes -->
<h1>Proveedores</h1>
<p>
    <a asp-action="Create" class="btn btn-info">Crear Proveedor</a>

</p>
@{
    //Hace referencia al ViewData creado en el controlador como ViewData["Paginas"] se ha llamado
    //Paginas el ViewData el ViewBag.Paginas espera algo que se llame paginas porque es a por lo que
    //va a ir cuando se ejecute y decimos que este ViewBag.Paginas es una lista de PaginasModel
    var paginas = ViewBag.Paginas as List<PaginasModel>;
}
@* Este código renderiza una vista parcial en ASP.NET.

La función Html.RenderPartial se utiliza para renderizar una vista parcial.
El primer argumento, "_CreatePartial", es el nombre de la vista parcial que se va a renderizar.
El segundo argumento, new ProveedorViewModel(), es el modelo que se pasa a la vista parcial.

Cuando este código se ejecuta, ASP.NET renderiza la vista parcial "_CreatePartial" y le pasa un nuevo objeto 
ProveedorViewModel como modelo.
Esto significa que cualquier lugar en tu vista donde veas este código, ASP.NET renderizará la vista parcial 
"_CreatePartial" en su lugar.

Las vistas parciales son útiles para reutilizar bloques de código que se repiten en varias vistas.
En lugar de duplicar ese código en cada vista, puedes ponerlo en una vista parcial y luego referenciar esa 
vista parcial en las vistas que necesitan ese bloque de código.
 *@
@* @{
    Html.RenderPartial("_CreatePartial", new ProveedorViewModel());
} *@

<form asp-controller="Proveedor" asp-action="Index">
    <p>
        Buscar: <input type="text" name="buscar" class="form-text" />
        <input type="submit" value="Buscar" class="btn btn-sm btn-dark" />
    </p>
</form>

<table class="table table-striped table-bordered w-100">
    <thead>
        <tr>
            <th class="col-2">Nombre</th>
            <th class="col-2">Contacto</th>
            <th class="col-2">Dirección</th>
            <th class="col-2" colspan="3">Acciones</th>
            <!-- Agrega aquí las demás columnas de la tabla -->
        </tr>
    </thead>
    <tbody>
        @foreach (var proveedor in Model)
        {
            <tr>
                <td>@proveedor.NombreProveedor</td>
                <td>@proveedor.Contacto</td>
                <td>@proveedor.Direccion</td>
                <td>
                    @if (User.IsInRole("administrador"))
                    {
                        <a asp-action="Delete" asp-route-id="@proveedor.Id" class="btn btn-danger">Delete</a>
                    }
                </td>
                <td>
                    @if (User.IsInRole("administrador"))
                    {
                        <a asp-action="Edit" asp-route-id="@proveedor.Id" class="btn btn-warning">Update</a>
                    }
                </td>
                <!-- Agrega aquí las demás celdas de la fila -->
            </tr>
        }
    </tbody>
</table>
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        @foreach (var pagina in paginas)
        {
            <li class="page-item @(pagina.Habilitada ? "" : "disabled") @(pagina.Activa ? "active" : "")">
                <a class="page-link" href="@Url.Action("Index", new { Pagina = pagina.Pagina, buscar= ViewData["Buscar"] })">
                    @if (pagina.Texto == "Anterior")
                    {
                        <span aria-hidden="true">«</span>
                    }
                    else if (pagina.Texto == "Siguiente")
                    {
                        <span aria-hidden="true">»</span>
                    }
                    else
                    {
                        @pagina.Texto
                    }
                </a>
            </li>
        }
    </ul>
</nav>