 /*Circuit Braker caracteristicas:
         * El circuit breaker es una estrategia que monitorea continuamente una operación o un servicio y "abre" el circuito (switch abierto) 
           para evitar que la aplicación realice más intentos si la operación sigue fallando.
         * Cuando se alcanza un cierto umbral de errores consecutivos o fallas en un servicio, el circuit breaker "abre" y bloquea futuras 
           solicitudes a ese servicio durante un período de tiempo definido.
         * Esto ayuda a prevenir la sobrecarga de los sistemas subyacentes y protege contra los tiempos de espera prolongados o los problemas persistentes.
         * Después de cierto tiempo, el circuit breaker "cierra" (switch cerrado) y permite que las solicitudes se reanuden, permitiendo que la aplicación 
          vuelva a intentar la operación.
         */
        /*Circuit bracker vs retry policy:
          La política de reintento se centra en volver a intentar operaciones fallidas de manera inmediata, mientras que el circuit breaker se enfoca 
          en evitar que la aplicación realice más intentos después de un número significativo de fallas, con el fin de proteger contra problemas persistentes 
          y evitar la degradación del sistema. Ambas estrategias pueden combinarse y utilizarse juntas para mejorar la resiliencia y la confiabilidad de una 
          aplicación.
         */
Manejadores de Eventos Circuit Braker:
        onBreak: Este manejador se ejecuta cuando el circuito se abre. Aquí se registra la excepción y la duración del tiempo de interrupción.
        onReset: Este manejador se ejecuta cuando el circuito se cierra después de haber estado abierto, indicando que las operaciones han vuelto 
        a la normalidad.
        onHalfOpen: Este manejador se ejecuta cuando el circuito está en estado "half-open", lo que significa que permitirá una única llamada de
        prueba para verificar si el problema se ha resuelto.
Manejadores de Eventos Retry Policy:
    retryCount: 5: El número máximo de intentos de reintento que la política intentará antes de dejar de reintentar.
    sleepDurationProvider: attempt => TimeSpan.FromSeconds(Math.Pow(2, attempt)): Proveedor de la duración de espera entre reintentos. Utiliza una estrategia 
    de espera exponencial, donde el tiempo de espera aumenta exponencialmente con cada intento. Por ejemplo, los tiempos de espera serían 2^1 segundos, 
    2^2 segundos, 2^3 segundos, etc.
    onRetry: Un manejador de eventos que se ejecuta en cada intento de reintento.
    
    onRetry-->Este manejador se ejecuta cada vez que ocurre una excepción que coincide con una de las excepciones especificadas y se va a realizar un
    reintento. El manejador onRetry tiene cuatro parámetros:

        exception: La excepción que causó el reintento.
        calculatedWaitDuration: La duración calculada de la espera antes de realizar el siguiente intento.
        attempt: El número de intento actual.
        context: Contexto adicional que puede ser proporcionado al ejecutar la política.